package Kerho.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import java.util.Iterator;
import Kerho.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.12.10 15:19:41 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class PeluritTest {



  // Generated by ComTest BEGIN
  /** testLisaa47 */
  @Test
  public void testLisaa47() {    // Pelurit: 47
    Pelurit pelurit = new Pelurit(); 
    Peluri ben1 = new Peluri(); 
    Peluri ben2 = new Peluri(); 
    assertEquals("From: Pelurit line: 51", 0, pelurit.getLkm()); 
    pelurit.lisaa(ben1); assertEquals("From: Pelurit line: 52", 1, pelurit.getLkm()); 
    pelurit.lisaa(ben2); assertEquals("From: Pelurit line: 53", 2, pelurit.getLkm()); 
    pelurit.lisaa(ben1); assertEquals("From: Pelurit line: 54", 3, pelurit.getLkm()); 
    assertEquals("From: Pelurit line: 55", ben1, pelurit.anna(0)); 
    assertEquals("From: Pelurit line: 56", ben2, pelurit.anna(1)); 
    assertEquals("From: Pelurit line: 57", ben1, pelurit.anna(2)); 
    assertEquals("From: Pelurit line: 58", false, pelurit.anna(1) == ben1); 
    assertEquals("From: Pelurit line: 59", true, pelurit.anna(1) == ben2); 
    try {
    assertEquals("From: Pelurit line: 60", ben1, pelurit.anna(3)); 
    fail("Pelurit: 60 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    pelurit.lisaa(ben1); assertEquals("From: Pelurit line: 61", 4, pelurit.getLkm()); 
    pelurit.lisaa(ben1); assertEquals("From: Pelurit line: 62", 5, pelurit.getLkm()); 
    pelurit.lisaa(ben1); assertEquals("From: Pelurit line: 63", 6, pelurit.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testGetLkm132 
   * @throws SailoException when error
   */
  @Test
  public void testGetLkm132() throws SailoException {    // Pelurit: 132
    Pelurit pelurit = new Pelurit(); 
    Peluri ben1 = new Peluri(); 
    Peluri ben2 = new Peluri(); 
    assertEquals("From: Pelurit line: 137", 0, pelurit.getLkm()); 
    pelurit.lisaa(ben1); assertEquals("From: Pelurit line: 138", 1, pelurit.getLkm()); 
    pelurit.lisaa(ben2); assertEquals("From: Pelurit line: 139", 2, pelurit.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator225 */
  @Test
  public void testIterator225() {    // Pelurit: 225
    Pelurit pelurit = new Pelurit(); 
    pelurit.lisaa(new Peluri("1|Ben One|Ben_O|1000|0509998888")); 
    pelurit.lisaa(new Peluri("2|Ben Two|Ben_Tw|1000|0509998888")); 
    pelurit.lisaa(new Peluri("3|Ben Three|Ben_Th|1000|0509998888")); 
    pelurit.lisaa(new Peluri("4|Ben Four|Ben_F|1000|0509998888")); 
    Iterator<Peluri> iter = pelurit.iterator(); 
    int i = 1; 
    for (; iter.hasNext(); ) {
    assertEquals("From: Pelurit line: 235", i, iter.next().getPeluriId()); 
    i++; 
    }
  } // Generated by ComTest END
}